政治予測専門システム「lain-politics」アーキテクチャ設計

  新しいディレクトリ構造

  src/
  ├── political_llm/        # 政治専門LLM処理
  │   ├── political_prompts.py    # 政治特化プロンプト
  │   ├── entity_recognizer.py    # 政治エンティティ認識
  │   └── bias_detector.py        # バイアス検知・除去
  ├── political_scraper/    # 政治専門データ収集
  │   ├── government_scraper.py   # 政府公式データ
  │   ├── party_scraper.py        # 政党データ
  │   ├── media_scraper.py        # メディア監視
  │   └── social_scraper.py       # SNS監視
  ├── political_analysis/   # 政治分析エンジン
  │   ├── sentiment_analyzer.py   # 感情分析
  │   ├── trend_analyzer.py       # トレンド分析
  │   ├── reliability_scorer.py   # 信頼性評価
  │   └── prediction_engine.py    # 予測エンジン
  ├── political_data/       # 政治データ管理
  │   ├── political_entities.py   # 政治家・政党DB
  │   ├── election_data.py        # 選挙データ
  │   └── poll_data.py           # 世論調査データ
  └── political_cli/        # 政治特化CLI
      ├── political_app.py        # メインアプリ
      └── political_commands.py   # 政治専用コマンド

  主要コンポーネント設計

  1. PoliticalLLMService (政治特化LLM)

  class PoliticalLLMService:
      def __init__(self):
          self.political_prompts = PoliticalPromptManager()
          self.entity_recognizer = PoliticalEntityRecognizer()
          self.bias_detector = PoliticalBiasDetector()

      def analyze_political_query(self, query: str) -> PoliticalQueryIntent:
          """政治クエリの意図を詳細分析"""
          # "岸田内閣の支持率推移" -> SUPPORT_RATING_TREND
          # "次期衆院選の自民党予測" -> ELECTION_PREDICTION_PARTY

      def generate_political_search_queries(self, intent: PoliticalQueryIntent) -> List[str]:
          """政治意図に基づく最適化された検索クエリ生成"""

      def synthesize_political_response(self,
          query: str,
          political_data: PoliticalDataCollection
      ) -> PoliticalResponse:
          """政治データの統合的分析・回答生成"""

  2. PoliticalScraperService (政治データ収集)

  class PoliticalScraperService:
      def __init__(self):
          self.gov_scraper = GovernmentScraper()      # 政府公式
          self.party_scraper = PartyScraper()         # 政党公式
          self.media_scraper = MediaScraper()         # 主要メディア
          self.social_scraper = SocialScraper()       # SNS監視

      def search_by_political_intent(self, intent: PoliticalQueryIntent) -> PoliticalDataCollection:
          """政治意図に基づく専門データ収集"""

      def get_latest_polls(self) -> List[PollData]:
          """最新世論調査データ収集"""

      def monitor_political_trends(self) -> TrendData:
          """政治トレンドのリアルタイム監視"""

  3. PoliticalAnalysisEngine (分析エンジン)

  class PoliticalAnalysisEngine:
      def __init__(self):
          self.sentiment_analyzer = PoliticalSentimentAnalyzer()
          self.trend_analyzer = PoliticalTrendAnalyzer()
          self.reliability_scorer = PoliticalReliabilityScorer()
          self.prediction_engine = PoliticalPredictionEngine()

      def analyze_political_sentiment(self, text: str, entity: str) -> SentimentScore:
          """政治エンティティに対する感情分析"""

      def predict_election_outcome(self, constituency: str) -> ElectionPrediction:
          """選挙結果予測"""

      def calculate_reliability_score(self, source: str, content: str) -> float:
          """政治情報の信頼性スコア算出"""

  政治特化の性能向上ポイント

  1. 専門用語辞書・エンティティDB

  # 政治専門辞書
  POLITICAL_ENTITIES = {
      "politicians": ["岸田文雄", "菅義偉", "安倍晋三", ...],
      "parties": ["自民党", "立憲民主党", "公明党", ...],
      "positions": ["内閣総理大臣", "官房長官", "財務大臣", ...],
      "policies": ["アベノミクス", "新しい資本主義", "デジタル田園都市国家構想", ...],
      "political_terms": ["国会", "衆議院", "参議院", "内閣", ...]
  }

  2. 政治特化プロンプト

  POLITICAL_PROMPTS = {
      "election_prediction": """
      あなたは日本政治の専門アナリストです。以下の情報を基に客観的な選挙予測を行ってください：

      【分析対象】: {constituency}
      【過去選挙データ】: {past_election_data}
      【現在の世論調査】: {current_polls}
      【政治情勢】: {political_situation}

      以下の観点で分析してください：
      1. 投票率予測
      2. 各候補の得票率予測
      3. 勝敗予測とその根拠
      4. 不確定要素の評価
      """,

      "sentiment_analysis": """
      以下のテキストについて、{political_entity}に対する感情を分析してください：

      【対象テキスト】: {text}
      【分析対象】: {political_entity}

      以下のスコアで評価してください：
      - ポジティブ度（0-100）
      - ネガティブ度（0-100）
      - 中立度（0-100）
      - 信頼度（0-100）
      """
  }

  3. 信頼性重み付けシステム

  class PoliticalReliabilityScorer:
      SOURCE_WEIGHTS = {
          # 政府公式 - 最高信頼性
          "kantei.go.jp": 1.0,
          "gov.go.jp": 1.0,
          "soumu.go.jp": 1.0,

          # 大手メディア - 高信頼性
          "nhk.or.jp": 0.95,
          "asahi.com": 0.9,
          "yomiuri.co.jp": 0.9,
          "mainichi.jp": 0.9,

          # 政治専門メディア
          "seijiyama.jp": 0.85,
          "senkyo.com": 0.85,

          # SNS - 低信頼性
          "twitter.com": 0.3,
          "facebook.com": 0.3,
      }